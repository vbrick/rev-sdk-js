{"version":3,"sources":["../src/util.ts","../src/embed/EventBus.ts","../src/Log.ts","../src/embed/WebcastStatus.ts","../src/embed/PlayerStatus.ts","../src/embed/PlaylistLayout.ts","../src/embed/IVbrickTypes.ts","../src/VbrickSDK.ts","../src/embed/auth.ts","../src/embed/VbrickEmbed.ts","../src/embed/VbrickVideoEmbed.ts","../src/embed/VbrickWebcastEmbed.ts","../src/embed/VbrickPlaylistEmbed.ts","../src/Config.ts","../src/embed/index.ts","../src/index.ts"],"sourcesContent":["/**\r\n * @internal\r\n */\r\nexport function isString (val: any): boolean {\r\n\treturn Object.prototype.toString.call(val) === '[object String]';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function lookupElement(element: string | HTMLElement): HTMLElement {\r\n\tconst el: HTMLElement = element instanceof HTMLElement ? element : document.querySelector(element);\r\n\r\n\tif(!el) {\r\n\t\tthrow new Error('Rev SDK Error: Could not resolve element');\r\n\t}\r\n\r\n\treturn el;\r\n}\r\n\r\nexport function getEmbedUrl(baseUrl: string, endpoint: string, params: Record<string, any>) {\r\n\tconst query = Object.entries(params)\r\n\t\t.map(([key, value]) =>\r\n\t\t\t!value ? undefined :\r\n\t\t\tvalue === true ? key :\r\n\t\t\t`${key}=${encodeURIComponent(value)}`)\r\n\t\t.filter(Boolean)\r\n\t\t.join('&');\r\n\r\n\treturn `${baseUrl}${endpoint}?${query}`;\r\n}","import { VbrickSDKConfig } from \"../VbrickSDK\";\r\nimport { TVbrickEvent, IListener, TPlayerMethod, TAuthMethods, TWebcastMethod, TVbrickMessages, TPlaylistMethod } from './IVbrickEvents';\r\n\r\n// default to 30 second timeout on authentication/SDK communication\r\nconst DEFAULT_TIMEOUT = 30 * 1000;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class EventBus {\r\n\tprivate win: Window;\r\n\tprivate msgListener: (e: MessageEvent) => void;\r\n\tprivate readonly baseUrl: string;\r\n\tprivate readonly shouldLog: boolean;\r\n\tprivate isDestroyed: boolean = false;\r\n\r\n\tprivate eventHandlers: { [K in TVbrickEvent]?: Array<IListener<K>> } = {};\r\n\r\n\tconstructor(\r\n\t\tiframe: HTMLIFrameElement,\r\n\t\tconfig: VbrickSDKConfig\r\n\t){\r\n\t\tthis.win = iframe.contentWindow;\r\n\t\tthis.msgListener = this.handleMessage.bind(this);\r\n\r\n\t\tglobalThis.addEventListener('message', this.msgListener);\r\n\t\tthis.baseUrl = config.baseUrl;\r\n\t\tthis.shouldLog = !!config.log;\r\n\t}\r\n\r\n\tpublic on<T extends TVbrickEvent>(event: T, fn: IListener<T>) {\r\n\t\tconst handlers = this.getHandlers(event);\r\n\t\thandlers.push(fn);\r\n\r\n\t\treturn () => this.off(event, fn);\r\n\t}\r\n\r\n\tpublic awaitEvent(event: TVbrickEvent | TVbrickEvent[], failEvent: TVbrickEvent = 'error', timeout: number = DEFAULT_TIMEOUT): Promise<any> {\r\n\t\tconst events = Array.isArray(event) ? event : [event];\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst handler = (fn: (e: any) => void) => (e: any) => {\r\n\t\t\t\tfn(e);\r\n\t\t\t\toffHandlers.forEach(h => h());\r\n\t\t\t};\r\n\r\n\t\t\tconst onEvent: any = handler(resolve);\r\n\t\t\tconst onErr: any = handler(reject);\r\n\t\t\tconst offHandlers = events.map(evt => this.on(evt, onEvent));\r\n\r\n\t\t\tif(failEvent) {\r\n\t\t\t\toffHandlers.push(this.on(failEvent, onErr));\r\n\t\t\t}\r\n\r\n\t\t\tif(timeout > 0) {\r\n\t\t\t\tconst timer = setTimeout(() => {\r\n\t\t\t\t\tif (this.isDestroyed) { return; }\r\n\t\t\t\t\tonErr(event + ': timeout')\r\n\t\t\t\t}, timeout);\r\n\t\t\t\toffHandlers.push(() => clearTimeout(timer));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic off<T extends TVbrickEvent>(event: T, fn: IListener<T>): void {\r\n\t\tconst handlers = this.getHandlers(event);\r\n\t\tconst i = handlers.indexOf(fn);\r\n\t\tif(i >= 0) {\r\n\t\t\thandlers.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Posts a message to the embed */\r\n\tpublic publish(...[event, msg = undefined]: TAuthMethods | TPlayerMethod | TWebcastMethod | TPlaylistMethod): void {\r\n\t\tthis.shouldLog && console.log('rev client posting message. ', event);\r\n\t\tthis.win.postMessage({\r\n\t\t\tapp: 'vbrick',\r\n\t\t\tevent,\r\n\t\t\tmsg\r\n\t\t}, this.baseUrl);\r\n\t}\r\n\r\n\t/** Posts an 'error' message to the embed */\r\n\tpublic publishError(msg: string) {\r\n\t\tthis.win.postMessage({\r\n\t\t\tapp: 'vbrick',\r\n\t\t\tevent: 'error',\r\n\t\t\tmsg\r\n\t\t}, this.baseUrl);\r\n\t}\r\n\r\n\t/** Fires local event handlers */\r\n\tpublic emitLocalEvent<T extends TVbrickEvent>(event: T, msg: TVbrickMessages[T] = undefined): void {\r\n\t\tthis.callHandlers(event, msg);\r\n\t}\r\n\r\n\t/** Calls the local 'error' event handlers */\r\n\tpublic emitLocalError(msg: string, err: any) {\r\n\t\tthis.callHandlers('error', { msg, err });\r\n\t}\r\n\r\n\tprivate handleMessage(e: MessageEvent): void {\r\n\t\tconst data = e.data || {};\r\n\r\n\t\tif(e.origin !== this.baseUrl ||\r\n\t\t\tdata.app !== 'vbrick' ||\r\n\t\t\t!data.event) {\r\n\t\t\tthis.shouldLog && console.log('rev SDK dropping inbound message. ', e.data);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst shouldLog = this.shouldLog && data.event !== 'currentTime';\r\n\r\n\t\tshouldLog && console.log('rev SDK inbound message. ', e.data);\r\n\r\n\t\tthis.callHandlers(data.event, data.msg);\r\n\t}\r\n\r\n\tprivate callHandlers(event: string, data: any): void {\r\n\t\tconst handlers = Array.from(this.getHandlers(event));\r\n\t\thandlers.forEach(h => h(data));\r\n\t}\r\n\tprivate getHandlers(event: string): IListener<any>[] {\r\n\t\tconst h: Record<string, IListener<any>[]> = this.eventHandlers;\r\n\t\tif(!h[event]) {\r\n\t\t\th[event] = [];\r\n\t\t}\r\n\t\treturn h[event];\r\n\t}\r\n\r\n\tpublic destroy(): void {\r\n\t\tif (this.isDestroyed) { return; }\r\n\t\tthis.isDestroyed = true;\r\n\t\tglobalThis.removeEventListener('message', this.msgListener);\r\n\t}\r\n}\r\n","import { VbrickSDKConfig } from \"./VbrickSDK\";\r\n\r\nexport interface ILogger {\r\n\tlog(message?: any, ...optionalParams: any[]): void;\r\n\terror(message?: any, ...optionalParams: any[]): void;\r\n}\r\n\r\nexport function getLogger(cfg: VbrickSDKConfig): ILogger {\r\n\treturn cfg.log ? console : {\r\n/**\r\n * @internal\r\n */\r\n\t\tlog: noop,\r\n\t\terror: noop\r\n\t};\r\n}\r\n\r\nfunction noop (){}\r\n","/**\r\n * @public\r\n * @group Enums\r\n * @category Webcast\r\n */\r\nexport enum WebcastStatus {\r\n\t/**\r\n\t * Embedded webcast is authenticating\r\n\t */\r\n\tLoading = 'Loading',\r\n\t/**\r\n\t * Embedded webcast is authenticated and waiting for webcast to start\r\n\t */\r\n\tScheduled = 'Scheduled',\r\n\t/**\r\n\t * Webcast is active (but not currently Broadcasting)\r\n\t */\r\n\tInProgress = 'InProgress',\r\n\t/**\r\n\t * Webcast is active with video stream\r\n\t */\r\n\tBroadcasting = 'Broadcasting',\r\n\t/**\r\n\t * Webcast has ended\r\n\t */\r\n\tCompleted = 'Completed',\r\n\t/**\r\n\t * Fatal error embedding webcast\r\n\t */\r\n\tError = 'Error'\r\n}\r\n","/**\r\n * @public\r\n * @group Enums\r\n * @category Base\r\n */\r\nexport enum PlayerStatus {\r\n\tInitializing = 'Initializing',\r\n\tPlaying = 'Playing',\r\n\tPaused = 'Paused',\r\n\tBuffering = 'Buffering',\r\n\tSeeking = 'Seeking',\r\n\tEnded = 'Ended',\r\n\tError = 'Error'\r\n}\r\n","/**\r\n * @public\r\n * @group Enums\r\n * @category Playlist\r\n */\r\nexport enum PlaylistLayout {\r\n    Filmstrip = 'row',\r\n    Grid = 'grid',\r\n    Slider = 'slider'\r\n}","import { WebcastStatus } from './WebcastStatus';\r\n\r\n//#endregion internal\r\n/**\r\n * The current subtitles language and if enabled or not\r\n * @public\r\n * @group Metadata\r\n * @category Base\r\n */\r\n\r\nexport interface ISubtitles {\r\n\tlanguage?: string;\r\n\tenabled: boolean;\r\n}\r\n/**\r\n * Basic metadata shared between VOD and Webcast Embeds\r\n * @public\r\n * @group Metadata\r\n * @category Base\r\n */\r\n\r\nexport interface IBasicInfo {\r\n\ttitle: string;\r\n\tisLive: boolean;\r\n\tsubtitles: Array<{ language: string; }>;\r\n}\r\n/**\r\n * Video Metadata\r\n * @public\r\n * @group Metadata\r\n * @category VOD\r\n */\r\n\r\nexport interface IVideoInfo extends IBasicInfo {\r\n\tvideoId: string;\r\n\ttitle: string;\r\n\tstatus: string;\r\n\tduration: number;\r\n\tisLive: boolean;\r\n\tis360: boolean;\r\n\thasAudioOnly: boolean;\r\n\tsubtitles: Array<{ language: string; }>;\r\n\tchapters: Array<{\r\n\t\ttime: number;\r\n\t\timageId?: string;\r\n\t\textension?: string;\r\n\t\ttitle?: string;\r\n\t}>;\r\n\tplaybacks: Array<{\r\n\t\tid: string;\r\n\t\tlabel: string;\r\n\t\tstreamDeliveryType: string;\r\n\t\tzoneName?: string;\r\n\t\tdeviceName?: string;\r\n\t}>;\r\n}\r\n\r\n/**\r\n * video sidebar button\r\n * @public\r\n * @group Enums\r\n * @category VOD\r\n */\r\nexport enum VideoPlaybackSidebarButton {\r\n\tAI = 'ai',\r\n\tCHAPTERS = 'chapters',\r\n\tCOMMENTS = 'comments',\r\n\tINFO = 'info',\r\n\tPLAYLIST = 'playlist',\r\n\tPULSE = 'pulse',\r\n\tREPORTS = 'reports',\r\n\tREVIEW = 'review',\r\n\tSHARE = 'share'\r\n}\r\n\r\n/**\r\n * Event indicating the current webcast status\r\n * @public\r\n * @group Events\r\n * @category Webcast\r\n */\r\n\r\nexport type IWebcastStatusMessage<T extends WebcastStatus = WebcastStatus> = {\r\n\tstatus: T;\r\n\tisPreProduction?: boolean;\r\n};\r\n/**\r\n * Webcast Metadata\r\n * @public\r\n * @group Metadata\r\n * @category Webcast\r\n */\r\n\r\nexport interface IWebcastInfo extends IBasicInfo {\r\n\twebcastId: string;\r\n\ttitle: string;\r\n\tstartDate: string;\r\n\tendDate: string;\r\n\tsubtitles: Array<{ language: string; }>;\r\n\tlinkedVideoId?: string;\r\n\tisLive: boolean;\r\n\tisPreProduction?: boolean;\r\n}\r\n/**\r\n * Fired when a new comment has been added to Chat\r\n * @public\r\n * @group Events\r\n * @category Webcast\r\n */\r\n\r\nexport interface IComment {\r\n\tcomment: string;\r\n\tdate: string;\r\n\tuserId: string;\r\n\tfirstname?: string;\r\n\tlastname?: string;\r\n}\r\n/**\r\n * Details of the current slide on a Webcast slide change event\r\n * @public\r\n * @group Events\r\n * @category Webcast\r\n */\r\n\r\nexport interface ISlideEvent {\r\n\tslideNumber: number;\r\n\tslideDelay: number;\r\n}\r\n/**\r\n * Details of a Webcast Poll\r\n * @public\r\n * @group Events\r\n * @category Webcast\r\n */\r\n\r\nexport interface IPoll {\r\n\t// pollClosed only has pollId\r\n\tpollId: string;\r\n\tquestion: string;\r\n\t// count only for poll published\r\n\tanswers: Array<{ text: string; count?: number; }>;\r\n\tmultipleChoice: boolean;\r\n\t// only for poll published\r\n\ttotalResponses?: number;\r\n}\r\n/**\r\n * The Webcast Poll that has been Closed/Unpublished\r\n * @public\r\n * @group Events\r\n * @category Webcast\r\n */\r\n\r\nexport type TPollId = {\r\n\tpollId: string;\r\n};\r\n/**\r\n * Details of if Video and/or Slides are currently displayed\r\n * @public\r\n * @group Events\r\n * @category Webcast\r\n */\r\n\r\nexport interface IWebcastLayout {\r\n\tvideo?: boolean;\r\n\tpresentation?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IPlaylistSwitch {\r\n\tvideoId: string;\r\n\tautoplay?: boolean;\r\n}\r\n\r\n/**\r\n * Video entry in playlist\r\n * @public\r\n * @group Metadata\r\n * @category Playlist\r\n */\r\nexport interface IPlaylistItem {\r\n\tid: string;\r\n\ttitle: string;\r\n\townerProfileImageUri: string | null;\r\n\townerFullName: string;\r\n}\r\n\r\n/**\r\n * Playlist data emitted when playlist first loaded\r\n * @public\r\n * @group Metadata\r\n * @category Playlist\r\n */\r\nexport interface IPlaylistInfo {\r\n\tid: string;\r\n\tname: string;\r\n\tvideos: IPlaylistItem[];\r\n}\r\n","\r\n/**\r\n * @public\r\n * @group Enums\r\n * @category Base\r\n */\r\nexport enum TokenType {\r\n\tJWT = 'JWT',\r\n\tACCESS_TOKEN = 'AccessToken',\r\n\tGUEST_REGISTRATION = 'GuestRegistration'\r\n}\r\n\r\n/**\r\n * @public\r\n * @group Configuration\r\n * @category Base\r\n */\r\nexport interface VbrickSDKToken {\r\n\ttype: TokenType;\r\n\r\n\t/**\r\n\t * String containing the token value\r\n\t */\r\n\tvalue: string;\r\n\r\n\t/**\r\n\t * The issuer for the token\r\n\t */\r\n\tissuer: string;\r\n}\r\n\r\n/**\r\n * @public\r\n * @group Configuration\r\n * @category Base\r\n */\r\nexport interface VbrickSDKConfig {\r\n\t/**\r\n\t * URL for Rev\r\n\t */\r\n\tbaseUrl: string;\r\n\r\n\t/**\r\n\t * Token for authentication\r\n\t */\r\n\ttoken?: VbrickSDKToken;\r\n\r\n\t/**\r\n\t * If true, sdk will log to console\r\n\t */\r\n\tlog?: boolean;\r\n}\r\n","import { VbrickSDKConfig } from \"../VbrickSDK\";\r\n\r\nexport function authenticateAccessToken(config: VbrickSDKConfig): Promise<any> {\r\n\treturn Promise.resolve({\r\n\t\taccessToken: config.token?.value\r\n\t});\r\n}\r\n\r\nexport function authenticateGuestToken(webcastId: string, config: VbrickSDKConfig): Promise<any> {\r\n\tconst issuer = config.token.issuer;\r\n\tconst token = config.token.value;\r\n\r\n\treturn fetch(`${config.baseUrl}/external/auth/jwt/${webcastId}`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'x-requested-with': 'xmlhttprequest'\r\n\t\t},\r\n\t\tbody: `{\r\n\t\t\t\t\"token\": \"${issuer} ${token}\"\r\n\t\t\t}`\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\treturn Promise.reject('Unable to authenticate jwt');\r\n\t\t\t}\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(response => ({\r\n\t\t\t...response,\r\n\t\t\tissuer\r\n\t\t}));\r\n}\r\n\r\nexport function authenticateJWT(config: VbrickSDKConfig): Promise<any> {\r\n\tconst issuer = config.token.issuer;\r\n\tconst jwt = config.token.value;\r\n\r\n\tconst url = new URL('/api/v2/jwtauthenticate', config.baseUrl);\r\n\turl.searchParams.set('jwt_token', jwt);\r\n\r\n\treturn fetch(`${url}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Accept': 'application/json',\r\n\t\t\t'x-requested-with': 'xmlhttprequest'\r\n\t\t}\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\treturn Promise.reject('Unable to authenticate jwt');\r\n\t\t\t}\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(response => ({\r\n\t\t\t...response,\r\n\t\t\tissuer\r\n\t\t}));\r\n}\r\n","import { EventBus } from './EventBus';\r\nimport { VbrickEmbedConfig } from './VbrickEmbedConfig';\r\nimport { getLogger, ILogger } from '../Log';\r\nimport { IVbrickBaseEmbed, PlayerStatus } from './IVbrickApi';\r\nimport { TokenType, VbrickSDKToken } from '../VbrickSDK';\r\nimport { TVbrickEvent, IListener } from './IVbrickEvents';\r\nimport { IBasicInfo, ISubtitles, VideoPlaybackSidebarButton } from './IVbrickTypes';\r\nimport { authenticateAccessToken, authenticateJWT } from './auth';\r\n\r\n/**\r\n * Base class for embedded content.\r\n */\r\nexport abstract class VbrickEmbed<TInfo extends IBasicInfo> implements IVbrickBaseEmbed<TInfo> {\r\n\r\n\t/**\r\n\t* video playing, buffering, etc\r\n\t*/\r\n\tpublic get playerStatus(): PlayerStatus {\r\n\t\treturn this._playerStatus;\r\n\t}\r\n\tprivate _playerStatus = PlayerStatus.Initializing;\r\n\r\n\t/**\r\n\t* Player Volume. 0-1\r\n\t*/\r\n\tpublic get volume(): number {\r\n\t\treturn this._volume;\r\n\t}\r\n\tprivate _volume: number = 1;\r\n\r\n\t/**\r\n\t * Whether subtitles are enabled, and selected language\r\n\t */\r\n\tpublic get currentSubtitles(): ISubtitles {\r\n\t\treturn this._currentSubtitles;\r\n\t}\r\n\tprivate _currentSubtitles: ISubtitles = { enabled: false };\r\n\r\n\tpublic get isLive(): boolean {\r\n\t\treturn !!this.info?.isLive;\r\n\t}\r\n\r\n\tpublic get info(): TInfo | undefined {\r\n\t\treturn this._info as TInfo;\r\n\t}\r\n\tprivate _info?: TInfo;\r\n\r\n\tprotected iframe: HTMLIFrameElement;\r\n\tprotected readonly iframeUrl: string;\r\n\tprotected eventBus: EventBus;\r\n\tprivate init?: Promise<any>;\r\n\tprivate unsubscribes: Array<() => void>;\r\n\tprotected logger: ILogger;\r\n\r\n\tconstructor(\r\n\t\tid: string,\r\n\t\tprotected readonly config: VbrickEmbedConfig,\r\n\t\tprotected readonly container: HTMLElement\r\n\t) {\r\n\t\tthis.iframeUrl = this.getEmbedUrl(id, this.config);\r\n\t\tthis.logger = getLogger(this.config);\r\n\t}\r\n\r\n\t/**\r\n\t * Plays the video if it is paused.\r\n\t */\r\n\t public play(): void {\r\n\t\tthis.eventBus.publish('playVideo');\r\n\t}\r\n\t/**\r\n\t  * Pauses the video if it is playing.\r\n\t  */\r\n\tpublic pause(): void {\r\n\t\tthis.eventBus.publish('pauseVideo');\r\n\t}\r\n\r\n\t/**\r\n\t * Sets player volume\r\n\t * @param volume {number} 0-1\r\n\t */\r\n\tpublic setVolume(volume: number): void {\r\n\t\tthis.eventBus.publish('setVolume', { volume });\r\n\t}\r\n\r\n\t/**\r\n\t * update the current subtitles settings\r\n\t * @param subtitles enable/disable subtitles and set language (leave language blank to use closed captions encoded into video stream)\r\n\t */\r\n\tpublic setSubtitles(subtitles: ISubtitles) {\r\n\t\tthis.eventBus.publish('setSubtitles', subtitles);\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates the embedded content was initialized and authenticated.\r\n\t * If there was a problem loading the content, or a problem with the token, the promise will be rejected.\r\n\t */\r\n\tpublic initialize(): Promise<void> {\r\n\t\tif (this.init) {\r\n\t\t\treturn this.init;\r\n\t\t}\r\n\t\tthis.iframe = this.render();\r\n\t\tthis.eventBus = new EventBus(this.iframe, this.config);\r\n\t\tthis.initializeEmbed();\r\n\r\n\t\tconst timeout = (this.config.timeoutSeconds! * 1000) || undefined;\r\n\r\n\t\treturn this.init = Promise.all([\r\n\t\t\tthis.initializeToken(),\r\n\t\t\tthis.eventBus.awaitEvent('load', 'error', timeout)\r\n\t\t])\r\n\t\t\t.then(([token]) => {\r\n\t\t\t\tif (!token) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.logger.log('embed loaded, authenticating');\r\n\t\t\t\tthis.eventBus.publish('authenticated', { token });\r\n\t\t\t\tthis.eventBus.awaitEvent('authChanged', 'error', timeout);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis._playerStatus = PlayerStatus.Error;\r\n\t\t\t\tthis.logger.error('Embed initialization error: ', err);\r\n\t\t\t\tthis.eventBus.publishError('initializationFailed');\r\n\t\t\t\tthis.eventBus.emitLocalError('Error loading embed content', err);\r\n\t\t\t\treturn Promise.reject(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tprotected initializeToken(): Promise<any> {\r\n\t\tif (!this.config.token) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tswitch (this.config.token.type) {\r\n\t\t\tcase TokenType.ACCESS_TOKEN:\r\n\t\t\t\treturn authenticateAccessToken(this.config);\r\n\t\t\tcase TokenType.JWT:\r\n\t\t\t\treturn authenticateJWT(this.config);\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject('Unsupported token type');\r\n\t\t}\r\n\t}\r\n\tprotected initializeEmbed(): void {\r\n\t\tthis.eventBus.on('videoLoaded', (e: any) => {\r\n\t\t\tthis._info = e;\r\n\t\t\tthis._playerStatus = PlayerStatus.Paused;\r\n\t\t});\r\n\t\t//don't include status in information, since it can change\r\n\t\tthis.eventBus.on('webcastLoaded', ({status, ...info}: any) => {\r\n\t\t\tthis._info = info;\r\n\t\t});\r\n\r\n\t\tthis.eventBus.on('playerStatusChanged', e => this._playerStatus = e.status);\r\n\t\tthis.eventBus.on('subtitlesChanged', subtitles => {\r\n\t\t\tthis._currentSubtitles = subtitles;\r\n\t\t});\r\n\r\n\t\tthis.eventBus.on('volumeChanged', e => this._volume = e);\r\n\r\n\t\t// allow setting volume on player ready\r\n\t\tif (this.config.initialVolume != undefined && isFinite(this.config.initialVolume)) {\r\n\t\t\tconst volumeCallback: IListener<'playerStatusChanged'> = (evt) => {\r\n\t\t\t\tif (evt.status !== PlayerStatus.Playing) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.eventBus.off('playerStatusChanged', volumeCallback);\r\n\t\t\t\tthis.setVolume(this.config.initialVolume);\r\n\t\t\t};\r\n\t\t\tthis.eventBus.on('playerStatusChanged', volumeCallback);\r\n\t\t}\r\n\t}\r\n\tprotected abstract getEmbedUrl(id: string, config: VbrickEmbedConfig): string;\r\n\r\n\tpublic on<T extends TVbrickEvent>(event: T, listener: IListener<T>): void {\r\n\t\t//ensure internal updates take effect before calling client handlers\r\n\t\tthis.eventBus.on<any>(event, (e: any) => setTimeout(() => listener(e)));\r\n\t}\r\n\r\n\tpublic off<T extends TVbrickEvent>(event: T, listener: IListener<T>): void {\r\n\t\tthis.eventBus.off(event, listener);\r\n\t}\r\n\r\n\tprivate render(): HTMLIFrameElement {\r\n\t\tconst iframe = document.createElement('iframe');\r\n\t\tiframe.setAttribute('frameborder', '0');\r\n\t\tiframe.setAttribute('allowFullScreen', '')\r\n\t\tiframe.allow = `autoplay${this.config.noLocalNetworkAccess ? '' : '; local-network-access'}`;\r\n\t\tiframe.width = this.config.width || '100%';\r\n\t\tiframe.height = this.config.height || '100%';\r\n\t\tiframe.src = this.iframeUrl;\r\n\r\n\t\tif (this.config.className) {\r\n\t\t\tiframe.className = this.config.className;\r\n\t\t}\r\n\r\n\t\tthis.container.appendChild(iframe);\r\n\r\n\t\treturn iframe;\r\n\t}\r\n\r\n\tpublic destroy(): void {\r\n\t\tthis.iframe.remove();\r\n\t\tthis.eventBus.destroy();\r\n\t\tthis.init = undefined;\r\n\t\tthis.unsubscribes?.forEach(fn => fn());\r\n\t}\r\n\r\n\tpublic async updateToken(newToken: VbrickSDKToken): Promise<void> {\r\n\t\tthis.config.token = newToken;\r\n\t\ttry {\r\n\t\t\tconst token = await this.initializeToken();\r\n\t\t\tthis.eventBus.publish('authChanged', { token });\r\n\t\t\tawait this.eventBus.awaitEvent('authChanged', 'error');\r\n\t\t} catch (error) {\r\n\t\t\tthis.logger.error('Error updating token: ', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * parses a config object and converts into query parameters for the iframe embed URL\r\n * @param config\r\n */\r\n export function getEmbedQuery(config: VbrickEmbedConfig): Record<string, undefined | boolean | string | number> {\r\n\treturn {\r\n\t\ttk: !!config.token,\r\n\t\tpopupAuth: (config.popupAuth != undefined)\r\n\t\t\t/* popupAuth requires a \"true\" value if set */\r\n\t\t\t? (!!config.popupAuth).toString()\r\n\t\t\t: undefined,\r\n\t\taccent: config.accentColor ?? config.accent,\r\n\t\tautoplay: config.autoplay,\r\n\t\tdefaultTheme: config.applyDefaultTheme,\r\n\t\tdefaultSidebar: config.defaultSidebar,\r\n\t\tfullPlayer: config.showFullPlayer,\r\n\t\tmobileLayoutBreakPoint: config.mobileLayoutBreakPoint,\r\n\t\tforceClosedCaptions: config.forcedCaptions ?? config.forceClosedCaptions,\r\n\t\tloopVideo: config.playInLoop ?? config.loopVideo,\r\n\t\tnoCc: config.hideSubtitles ?? config.noCc,\r\n\t\tnoCenterButtons: config.hideOverlayControls ?? config.noCenterButtons,\r\n\t\tnoChapters: config.hideChapters ?? config.noChapters,\r\n\t\tnoFullscreen: config.hideFullscreen ?? config.noFullscreen,\r\n\t\tnoPlayBar: config.hidePlayControls ?? config.noPlayBar,\r\n\t\tnoSettings: config.hideSettings ?? config.noSettings,\r\n\t\tnoChapterSeek: config.hideChapterNavigation ?? config.noChapterSeek,\r\n\t\tnoChapterDisplay: config.hideChapterImages ?? config.noChapterDisplay,\r\n\t\tnoChapterMenu: config.hideChapterMenu ?? config.noChapterMenu,\r\n\t\tsidebarFilterQuery: config.sidebarFilterQuery,\r\n\t\tstartAt: config.startAt,\r\n\t\t// all sidebar tabs are by default true, so only include if explicitly false\r\n\t\t...config.showFullPlayer && {\r\n\t\t\thideInfo: config.sidebarTabs[VideoPlaybackSidebarButton.INFO] === false || config.hideInfo === true,\r\n\t\t\thideComments: config.sidebarTabs[VideoPlaybackSidebarButton.COMMENTS] === false || config.hideComments === true,\r\n\t\t\thidePulse: config.sidebarTabs[VideoPlaybackSidebarButton.PULSE] === false || config.hidePulse === true,\r\n\t\t\thideReview: config.sidebarTabs[VideoPlaybackSidebarButton.REVIEW] === false || config.hideReview === true,\r\n\t\t\thidePlaylist: config.sidebarTabs[VideoPlaybackSidebarButton.PLAYLIST] === false || config.hidePlaylist === true,\r\n\t\t\thideChapters: config.sidebarTabs[VideoPlaybackSidebarButton.CHAPTERS] === false || config.hideChapters === true,\r\n\t\t\thideAnalytics: config.sidebarTabs[VideoPlaybackSidebarButton.REPORTS] === false || config.hideAnalytics === true,\r\n\t\t}\r\n\t};\r\n}\r\n","import { getEmbedUrl } from '../util';\r\nimport { IVbrickVideoEmbed } from './IVbrickApi';\r\nimport { IVideoInfo } from \"./IVbrickTypes\";\r\nimport { getEmbedQuery, VbrickEmbed } from './VbrickEmbed';\r\nimport { VbrickEmbedConfig, VbrickVideoEmbedConfig } from './VbrickEmbedConfig';\r\n\r\n/**\r\n * Internal class used to model an embedded video\r\n */\r\nexport class VbrickVideoEmbed extends VbrickEmbed<IVideoInfo> implements IVbrickVideoEmbed {\r\n\r\n\t/**\r\n\t * Current position in video in seconds\r\n\t */\r\n\tpublic get currentTime(): number {\r\n\t\treturn this._currentTime;\r\n\t}\r\n\tprivate _currentTime: number;\r\n\r\n\t/**\r\n\t * Duration of video in seconds. Will be undefined for live content\r\n\t */\r\n\tpublic get duration(): number | undefined {\r\n\t\treturn this.info?.duration;\r\n\t}\r\n\r\n\t/**\r\n\t * Current playback speed\r\n\t */\r\n\tpublic get playbackSpeed(): number {\r\n\t\treturn this._playbackSpeed;\r\n\t}\r\n\tprivate _playbackSpeed: number = 1;\r\n\r\n\t/**\r\n\t * Contains metadata for the video\r\n\t * @deprecated Use `info` instead\r\n\t */\r\n\tpublic get videoInfo(): IVideoInfo | undefined {\r\n\t\treturn this.info;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tid: string,\r\n\t\tconfig: VbrickVideoEmbedConfig,\r\n\t\tcontainer: HTMLElement\r\n\t) {\r\n\t\tsuper(id, config, container);\r\n\t}\r\n\r\n\t/**\r\n\t * sets playback rate \r\n\t * @param speed {number} 0-16, default is 1\r\n\t */\r\n\tpublic setPlaybackSpeed(speed: number): void {\r\n\t\tif (this.isLive) {\r\n\t\t\tthis.logger.log('Live video, cannot change speed');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.eventBus.publish('setPlaybackSpeed', { speed });\r\n\t}\r\n\r\n\t/**\r\n\t * sets the current time in the video\r\n\t * @param currentTime {number} 0 - video duration\r\n\t */\r\n\tpublic seek(currentTime: number) {\r\n\t\tif (this.isLive) {\r\n\t\t\tthis.logger.log('Live video, seek');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.eventBus.publish('seek', { currentTime });\r\n\t}\r\n\r\n\tprotected initializeEmbed(): void {\r\n\t\tsuper.initializeEmbed();\r\n\t\tthis.eventBus.on('currentTime', e => {\r\n\t\t\tthis._currentTime = e.currentTime;\r\n\t\t\t// update duration in videoInfo?\r\n\t\t});\r\n\t\tthis.eventBus.on('playbackSpeedChanged', e => {\r\n\t\t\tthis._playbackSpeed = e;\r\n\t\t});\r\n\t}\r\n\tprotected getEmbedUrl(id: string, config: VbrickEmbedConfig): string {\r\n\t\treturn getEmbedUrl(config.baseUrl, '/embed', {\r\n\t\t\tid,\r\n\t\t\t...getEmbedQuery(config)\r\n\t\t});\r\n\t}\r\n}\r\n","import { TokenType, VbrickSDKToken } from '../VbrickSDK';\r\nimport { IVbrickWebcastEmbed, WebcastStatus } from './IVbrickApi';\r\nimport { authenticateGuestToken } from './auth';\r\nimport { VbrickEmbedConfig, VbrickWebcastEmbedConfig } from './VbrickEmbedConfig';\r\nimport { getEmbedUrl } from '../util';\r\nimport { IWebcastInfo, IWebcastLayout } from \"./IVbrickTypes\";\r\nimport { getEmbedQuery, VbrickEmbed } from './VbrickEmbed';\r\n\r\nfunction isFullWebcastEnabled(config: VbrickWebcastEmbedConfig) {\r\n\treturn config.showFullWebcast ?? config.enableFullRev;\r\n}\r\n\r\nexport class VbrickWebcastEmbed extends VbrickEmbed<IWebcastInfo> implements IVbrickWebcastEmbed {\r\n\r\n\tpublic get webcastStatus() {\r\n\t\treturn this._webcastStatus;\r\n\t};\r\n\tprivate _webcastStatus: WebcastStatus = WebcastStatus.Loading;\r\n\t\r\n\tconstructor(\r\n\t\tprivate readonly webcastId: string,\r\n\t\tconfig: VbrickWebcastEmbedConfig,\r\n\t\tcontainer: HTMLElement\r\n\t) {\r\n\t\tsuper(webcastId, config, container);\r\n\t}\r\n\r\n\tprotected initializeToken(): Promise<VbrickSDKToken> {\r\n\t\tconst {type, issuer} = this.config.token ?? {};\r\n\r\n\t\tif (type === TokenType.GUEST_REGISTRATION || (type === TokenType.JWT && issuer === 'vbrick_rev')) {\r\n\t\t\treturn authenticateGuestToken(this.webcastId, this.config);\r\n\t\t}\r\n\r\n\t\treturn super.initializeToken();\r\n\t}\r\n\r\n\tprotected async initializeEmbed(): Promise<void> {\r\n\t\tsuper.initializeEmbed();\r\n\r\n\t\t(<const>['webcastStarted', 'broadcastStarted', 'broadcastStopped', 'webcastEnded']).forEach(event => {\r\n\t\t\tthis.eventBus.on(event, data => this._webcastStatus = data.status);\r\n\t\t});\r\n\r\n\t\tthis.eventBus.on('webcastLoaded', e => {\r\n\t\t\tthis._webcastStatus = e.status;\r\n\t\t\t// start initially with hidden slides\r\n\t\t\tif (isFullWebcastEnabled(this.config)) {\r\n\t\t\t\tthis.updateLayout({ video: true, presentation: false });\r\n\t\t\t}\r\n\t\t});\r\n\t\t// if a webcast is completed it may redirect to a recoreded version of it\r\n\t\tthis.eventBus.on('videoLoaded', () => {\r\n\t\t\tthis._webcastStatus = WebcastStatus.Completed;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic updateLayout(layout: IWebcastLayout) {\r\n\t\tthis.eventBus.publish('updateLayout', layout);\r\n\t}\r\n\tprotected getEmbedUrl(id: string, config: VbrickEmbedConfig): string {\r\n\t\treturn getEmbedUrl(config.baseUrl, `/embed/webcast/${id}`, {\r\n\t\t\tenableFullRev: isFullWebcastEnabled(config),\r\n\t\t\t...getEmbedQuery(config)\r\n\t\t});\r\n\t}\r\n}\r\n","import { getEmbedUrl } from \"../util\";\r\nimport {VbrickVideoEmbed} from \"./VbrickVideoEmbed\";\r\nimport {IPlaylistInfo, IVbrickPlaylistEmbed} from \"./IVbrickApi\"\r\nimport { VbrickPlaylistEmbedConfig } from \"./VbrickEmbedConfig\";\r\nimport { getEmbedQuery } from \"./VbrickEmbed\";\r\n\r\nexport class VbrickPlaylistEmbed extends VbrickVideoEmbed implements IVbrickPlaylistEmbed {\r\n    public get playlist(): IPlaylistInfo {\r\n        return this._playlist;\r\n    }\r\n    private _playlist: IPlaylistInfo;\r\n\r\n    public get currentIndex(): number {\r\n        return this._index;\r\n    }\r\n    private _index: number = 0;\r\n\r\n    constructor(\r\n        id: string,\r\n        config: VbrickPlaylistEmbedConfig,\r\n        container: HTMLElement\r\n    ) {\r\n        super(id, config, container);\r\n    }\r\n\r\n    protected initializeEmbed(): void {\r\n        super.initializeEmbed();\r\n        this.eventBus.on('playlistLoaded', playlist => {\r\n            this._playlist = playlist;\r\n            if (this.info?.videoId) {\r\n                this._index = getPlaylistIndex(this.playlist, this.info?.videoId) ?? 0;\r\n            }\r\n        });\r\n        this.eventBus.on('videoLoaded', video => {\r\n            // older versions of Rev do not support playlistLoaded event\r\n            if (!this.playlist?.videos) { return; }\r\n            this._index = getPlaylistIndex(this.playlist, video.videoId) ?? 0;\r\n            this.eventBus.emitLocalEvent('playlistItem', {\r\n                index: this._index,\r\n                videoId: this.playlist.videos[this._index].id\r\n            });\r\n        });\r\n    }\r\n\r\n    public previous() {\r\n        const vid = wrapAt(this.playlist.videos, this._index - 1);\r\n        this.switchVideo(vid.id, true);\r\n    }\r\n\r\n    public next() {\r\n        const vid = wrapAt(this.playlist.videos, this._index + 1);\r\n        this.switchVideo(vid.id, true);\r\n    }\r\n\r\n    switchVideo(videoId?: string, autoplay?: boolean | undefined): void {\r\n        this.eventBus.publish('switchVideo', { videoId, autoplay });\r\n    }\r\n\r\n    protected getEmbedUrl(id: string, config: VbrickPlaylistEmbedConfig): string {\r\n        return getEmbedUrl(config.baseUrl, '/embed', {\r\n            playlist: id,\r\n            layout: config.layout,\r\n            noToolbar: config.hideToolbar,\r\n            maxRow: config.videosPerRow,\r\n            maxVideos: config.maxVideos,\r\n            ...getEmbedQuery(config)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * get index of the specified video within a playlist\r\n * @param playlist\r\n * @param videoId\r\n * @returns\r\n */\r\nfunction getPlaylistIndex(playlist: IPlaylistInfo, videoId: string): number | undefined {\r\n    const idx = playlist.videos.findIndex(({ id }) => id === videoId);\r\n    return idx >= 0 ? idx : undefined;\r\n}\r\n\r\n/**\r\n * get item at index, but wrap around at edges\r\n * @param arr\r\n * @param i\r\n * @returns\r\n */\r\nfunction wrapAt<T>(arr: T[], i: number): T {\r\n    const n = arr.length;\r\n\treturn arr[((i % n) + n) % n];\r\n}","import { VbrickSDKConfig } from './VbrickSDK';\r\n\r\nexport function resolveConfig<TConfig extends VbrickSDKConfig>(configuration: TConfig): TConfig {\r\n\tconst cfg = {\r\n\t\t...configuration\r\n\t};\r\n\tvalidateConfig(cfg);\r\n\treturn cfg;\r\n}\r\n\r\nfunction validateConfig(cfg: VbrickSDKConfig): void {\r\n\tif(!cfg.baseUrl?.match(/^https?:\\/\\//)) {\r\n\t\tthrow new Error('Rev SDK Error: baseUrl invalid');\r\n\t}\r\n\tcfg.baseUrl = new URL(cfg.baseUrl).origin;\r\n}\r\n","import type { IVbrickPlaylistEmbed, IVbrickVideoEmbed, IVbrickWebcastEmbed } from './IVbrickApi';\r\nimport type { VbrickPlaylistEmbedConfig, VbrickVideoEmbedConfig, VbrickWebcastEmbedConfig } from './VbrickEmbedConfig';\r\nimport { VbrickVideoEmbed } from './VbrickVideoEmbed';\r\nimport { VbrickWebcastEmbed } from './VbrickWebcastEmbed';\r\nimport { VbrickPlaylistEmbed } from './VbrickPlaylistEmbed';\r\nimport { lookupElement } from '../util';\r\nimport { resolveConfig } from '../Config';\r\n\r\nexport * from './IVbrickApi';\r\nexport * from './VbrickEmbedConfig';\r\n\r\n/**\r\n * Embed a VOD/video on a page, with optional token-based authentication. Returns a VbrickEmbed object for interacting with playback and receiving events.\r\n * @public\r\n * @group Core API\r\n * @category Core\r\n * @param element - Container element where the embed content will be rendered. Either an HTMLElement or a CSS Selector string.\r\n * @param videoId - ID of the video to embed\r\n * @param config - A configuration object\r\n * @returns An {@link IVbrickVideoEmbed} object\r\n */\r\nexport function embedVideo(\r\n\telement: HTMLElement | string,\r\n\tvideoId: string,\r\n\tconfig: VbrickVideoEmbedConfig\r\n): IVbrickVideoEmbed {\r\n\tconst el = lookupElement(element);\r\n\tconst cfg = resolveConfig(config);\r\n\r\n\tconst video = new VbrickVideoEmbed(videoId, cfg, el);\r\n\tvideo.initialize().catch(() => {});\r\n\treturn video;\r\n}\r\n\r\n\r\n/**\r\n * Embeds a webcast on the page\r\n * @public\r\n * @group Core API\r\n * @category Core\r\n * @param element - Either a CSS selector string or HTML Element where the embed content will be rendered\r\n * @param webcastId - ID of the webcast to embed\r\n * @param config - A configuration object\r\n * @returns An {@link IVbrickWebcastEmbed} object\r\n *\r\n * @example\r\n * Embedding a webcast:\r\n * ```\r\n * //In HTML:  <div id=\"webcast-embed\"></div>\r\n *\r\n * const webcastId = '0d252797-6db7-44dc-aced-25a6843d529c';\r\n * revSdk.embedWebcast('#webcast-embed', webcastId, {\r\n *     showVideo: true,\r\n *     token\r\n * });\r\n * ```\r\n *\r\n */\r\nexport function embedWebcast(\r\n\telement: HTMLElement | string,\r\n\twebcastId: string,\r\n\tconfig: VbrickWebcastEmbedConfig\r\n): IVbrickWebcastEmbed {\r\n\r\n\tconst el = lookupElement(element);\r\n\tconst cfg = resolveConfig(config);\r\n\r\n\tconst webcast = new VbrickWebcastEmbed(webcastId, cfg, el);\r\n\twebcast.initialize().catch(() => {});\r\n\treturn webcast;\r\n}\r\n\r\n/**\r\n * Embeds a playlist on the page\r\n * @public\r\n * @group Core API\r\n * @category Core\r\n * @param element - Either a CSS selector string or HTML Element where the embed content will be rendered\r\n * @param playlistId - ID of the playlist to embed\r\n * @param config - A configuration object\r\n * @returns An {@link IVbrickPlaylistEmbed} object\r\n *\r\n * @example\r\n * Embedding a playlist:\r\n * ```\r\n * //In HTML:  <div id=\"playlist-embed\"></div>\r\n *\r\n * const playlistId = '0d252797-6db7-44dc-aced-25a6843d529c';\r\n * revSdk.embedPlaylist('#playlist-embed', playlistId, {\r\n *     autoplay: true,\r\n *     token\r\n * });\r\n * ```\r\n *\r\n */\r\nexport function embedPlaylist(\r\n\telement: HTMLElement | string,\r\n\tplaylistId: string,\r\n\tconfig: VbrickPlaylistEmbedConfig\r\n): IVbrickPlaylistEmbed {\r\n\r\n\tconst el = lookupElement(element);\r\n\tconst cfg = resolveConfig(config);\r\n\r\n\tconst player = new VbrickPlaylistEmbed(playlistId, cfg, el);\r\n\tplayer.initialize().catch(() => {});\r\n\treturn player;\r\n}\r\n\r\n","/**\r\n * A javascript SDK for embedding or calling rev APIs\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\nimport { embedVideo, embedWebcast, embedPlaylist, PlayerStatus, WebcastStatus, PlaylistLayout } from './embed';\r\nimport {TokenType} from './VbrickSDK';\r\n\r\nexport * from './embed';\r\nexport * from './VbrickSDK';\r\n\r\n\r\n\r\n/**\r\n * @public\r\n * @group Core API\r\n * @category Core\r\n */\r\nconst revSDK = {\r\n    embedWebcast,\r\n    embedVideo,\r\n    embedPlaylist,\r\n    TokenType,\r\n    PlayerStatus,\r\n    WebcastStatus,\r\n    PlaylistLayout\r\n};\r\n\r\nexport default revSDK;"],"mappings":";AAUO,SAAS,cAAc,SAA4C;AACzE,QAAM,KAAkB,mBAAmB,cAAc,UAAU,SAAS,cAAc,OAAO;AAEjG,MAAG,CAAC,IAAI;AACP,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC3D;AAEA,SAAO;AACR;AAEO,SAAS,YAAY,SAAiB,UAAkB,QAA6B;AAC3F,QAAM,QAAQ,OAAO,QAAQ,MAAM,EACjC,IAAI,CAAC,CAAC,KAAK,KAAK,MAChB,CAAC,QAAQ,SACT,UAAU,OAAO,MACjB,GAAG,GAAG,IAAI,mBAAmB,KAAK,CAAC,EAAE,EACrC,OAAO,OAAO,EACd,KAAK,GAAG;AAEV,SAAO,GAAG,OAAO,GAAG,QAAQ,IAAI,KAAK;AACtC;;;AC1BA,IAAM,kBAAkB,KAAK;AAKtB,IAAM,WAAN,MAAe;AAAA,EASrB,YACC,QACA,QACA;AAPD,SAAQ,cAAuB;AAE/B,SAAQ,gBAA+D,CAAC;AAMvE,SAAK,MAAM,OAAO;AAClB,SAAK,cAAc,KAAK,cAAc,KAAK,IAAI;AAE/C,eAAW,iBAAiB,WAAW,KAAK,WAAW;AACvD,SAAK,UAAU,OAAO;AACtB,SAAK,YAAY,CAAC,CAAC,OAAO;AAAA,EAC3B;AAAA,EAEO,GAA2B,OAAU,IAAkB;AAC7D,UAAM,WAAW,KAAK,YAAY,KAAK;AACvC,aAAS,KAAK,EAAE;AAEhB,WAAO,MAAM,KAAK,IAAI,OAAO,EAAE;AAAA,EAChC;AAAA,EAEO,WAAW,OAAsC,YAA0B,SAAS,UAAkB,iBAA+B;AAC3I,UAAM,SAAS,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AACpD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,YAAM,UAAU,CAAC,OAAyB,CAAC,MAAW;AACrD,WAAG,CAAC;AACJ,oBAAY,QAAQ,OAAK,EAAE,CAAC;AAAA,MAC7B;AAEA,YAAM,UAAe,QAAQ,OAAO;AACpC,YAAM,QAAa,QAAQ,MAAM;AACjC,YAAM,cAAc,OAAO,IAAI,SAAO,KAAK,GAAG,KAAK,OAAO,CAAC;AAE3D,UAAG,WAAW;AACb,oBAAY,KAAK,KAAK,GAAG,WAAW,KAAK,CAAC;AAAA,MAC3C;AAEA,UAAG,UAAU,GAAG;AACf,cAAM,QAAQ,WAAW,MAAM;AAC9B,cAAI,KAAK,aAAa;AAAE;AAAA,UAAQ;AAChC,gBAAM,QAAQ,WAAW;AAAA,QAC1B,GAAG,OAAO;AACV,oBAAY,KAAK,MAAM,aAAa,KAAK,CAAC;AAAA,MAC3C;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEO,IAA4B,OAAU,IAAwB;AACpE,UAAM,WAAW,KAAK,YAAY,KAAK;AACvC,UAAM,IAAI,SAAS,QAAQ,EAAE;AAC7B,QAAG,KAAK,GAAG;AACV,eAAS,OAAO,GAAG,CAAC;AAAA,IACrB;AAAA,EACD;AAAA;AAAA,EAGO,WAAW,CAAC,OAAO,MAAM,MAAS,GAA0E;AAClH,SAAK,aAAa,QAAQ,IAAI,gCAAgC,KAAK;AACnE,SAAK,IAAI,YAAY;AAAA,MACpB,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACD,GAAG,KAAK,OAAO;AAAA,EAChB;AAAA;AAAA,EAGO,aAAa,KAAa;AAChC,SAAK,IAAI,YAAY;AAAA,MACpB,KAAK;AAAA,MACL,OAAO;AAAA,MACP;AAAA,IACD,GAAG,KAAK,OAAO;AAAA,EAChB;AAAA;AAAA,EAGO,eAAuC,OAAU,MAA0B,QAAiB;AAClG,SAAK,aAAa,OAAO,GAAG;AAAA,EAC7B;AAAA;AAAA,EAGO,eAAe,KAAa,KAAU;AAC5C,SAAK,aAAa,SAAS,EAAE,KAAK,IAAI,CAAC;AAAA,EACxC;AAAA,EAEQ,cAAc,GAAuB;AAC5C,UAAM,OAAO,EAAE,QAAQ,CAAC;AAExB,QAAG,EAAE,WAAW,KAAK,WACpB,KAAK,QAAQ,YACb,CAAC,KAAK,OAAO;AACb,WAAK,aAAa,QAAQ,IAAI,sCAAsC,EAAE,IAAI;AAC1E;AAAA,IACD;AAEA,UAAM,YAAY,KAAK,aAAa,KAAK,UAAU;AAEnD,iBAAa,QAAQ,IAAI,6BAA6B,EAAE,IAAI;AAE5D,SAAK,aAAa,KAAK,OAAO,KAAK,GAAG;AAAA,EACvC;AAAA,EAEQ,aAAa,OAAe,MAAiB;AACpD,UAAM,WAAW,MAAM,KAAK,KAAK,YAAY,KAAK,CAAC;AACnD,aAAS,QAAQ,OAAK,EAAE,IAAI,CAAC;AAAA,EAC9B;AAAA,EACQ,YAAY,OAAiC;AACpD,UAAM,IAAsC,KAAK;AACjD,QAAG,CAAC,EAAE,KAAK,GAAG;AACb,QAAE,KAAK,IAAI,CAAC;AAAA,IACb;AACA,WAAO,EAAE,KAAK;AAAA,EACf;AAAA,EAEO,UAAgB;AACtB,QAAI,KAAK,aAAa;AAAE;AAAA,IAAQ;AAChC,SAAK,cAAc;AACnB,eAAW,oBAAoB,WAAW,KAAK,WAAW;AAAA,EAC3D;AACD;;;AC/HO,SAAS,UAAU,KAA+B;AACxD,SAAO,IAAI,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,IAI1B,KAAK;AAAA,IACL,OAAO;AAAA,EACR;AACD;AAEA,SAAS,OAAO;AAAC;;;ACZV,IAAK,gBAAL,kBAAKA,mBAAL;AAIN,EAAAA,eAAA,aAAU;AAIV,EAAAA,eAAA,eAAY;AAIZ,EAAAA,eAAA,gBAAa;AAIb,EAAAA,eAAA,kBAAe;AAIf,EAAAA,eAAA,eAAY;AAIZ,EAAAA,eAAA,WAAQ;AAxBG,SAAAA;AAAA,GAAA;;;ACAL,IAAK,eAAL,kBAAKC,kBAAL;AACN,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,YAAS;AACT,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,WAAQ;AACR,EAAAA,cAAA,WAAQ;AAPG,SAAAA;AAAA,GAAA;;;ACAL,IAAK,iBAAL,kBAAKC,oBAAL;AACH,EAAAA,gBAAA,eAAY;AACZ,EAAAA,gBAAA,UAAO;AACP,EAAAA,gBAAA,YAAS;AAHD,SAAAA;AAAA,GAAA;;;AC0DL,IAAK,6BAAL,kBAAKC,gCAAL;AACN,EAAAA,4BAAA,QAAK;AACL,EAAAA,4BAAA,cAAW;AACX,EAAAA,4BAAA,cAAW;AACX,EAAAA,4BAAA,UAAO;AACP,EAAAA,4BAAA,cAAW;AACX,EAAAA,4BAAA,WAAQ;AACR,EAAAA,4BAAA,aAAU;AACV,EAAAA,4BAAA,YAAS;AACT,EAAAA,4BAAA,WAAQ;AATG,SAAAA;AAAA,GAAA;;;ACzDL,IAAK,YAAL,kBAAKC,eAAL;AACN,EAAAA,WAAA,SAAM;AACN,EAAAA,WAAA,kBAAe;AACf,EAAAA,WAAA,wBAAqB;AAHV,SAAAA;AAAA,GAAA;;;ACJL,SAAS,wBAAwB,QAAuC;AAC9E,SAAO,QAAQ,QAAQ;AAAA,IACtB,aAAa,OAAO,OAAO;AAAA,EAC5B,CAAC;AACF;AAEO,SAAS,uBAAuB,WAAmB,QAAuC;AAChG,QAAM,SAAS,OAAO,MAAM;AAC5B,QAAM,QAAQ,OAAO,MAAM;AAE3B,SAAO,MAAM,GAAG,OAAO,OAAO,sBAAsB,SAAS,IAAI;AAAA,IAChE,QAAQ;AAAA,IACR,SAAS;AAAA,MACR,gBAAgB;AAAA,MAChB,oBAAoB;AAAA,IACrB;AAAA,IACA,MAAM;AAAA,gBACQ,MAAM,IAAI,KAAK;AAAA;AAAA,EAE9B,CAAC,EACC,KAAK,cAAY;AACjB,QAAI,CAAC,SAAS,IAAI;AACjB,aAAO,QAAQ,OAAO,4BAA4B;AAAA,IACnD;AACA,WAAO,SAAS,KAAK;AAAA,EACtB,CAAC,EACA,KAAK,eAAa;AAAA,IAClB,GAAG;AAAA,IACH;AAAA,EACD,EAAE;AACJ;AAEO,SAAS,gBAAgB,QAAuC;AACtE,QAAM,SAAS,OAAO,MAAM;AAC5B,QAAM,MAAM,OAAO,MAAM;AAEzB,QAAM,MAAM,IAAI,IAAI,2BAA2B,OAAO,OAAO;AAC7D,MAAI,aAAa,IAAI,aAAa,GAAG;AAErC,SAAO,MAAM,GAAG,GAAG,IAAI;AAAA,IACtB,QAAQ;AAAA,IACR,SAAS;AAAA,MACR,UAAU;AAAA,MACV,oBAAoB;AAAA,IACrB;AAAA,EACD,CAAC,EACC,KAAK,cAAY;AACjB,QAAI,CAAC,SAAS,IAAI;AACjB,aAAO,QAAQ,OAAO,4BAA4B;AAAA,IACnD;AACA,WAAO,SAAS,KAAK;AAAA,EACtB,CAAC,EACA,KAAK,eAAa;AAAA,IAClB,GAAG;AAAA,IACH;AAAA,EACD,EAAE;AACJ;;;AC9CO,IAAe,cAAf,MAAwF;AAAA,EA0C9F,YACC,IACmB,QACA,WAClB;AAFkB;AACA;AArCpB,SAAQ;AAQR,SAAQ,UAAkB;AAQ1B,SAAQ,oBAAgC,EAAE,SAAS,MAAM;AAuBxD,SAAK,YAAY,KAAK,YAAY,IAAI,KAAK,MAAM;AACjD,SAAK,SAAS,UAAU,KAAK,MAAM;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EA5CA,IAAW,eAA6B;AACvC,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,SAAiB;AAC3B,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,mBAA+B;AACzC,WAAO,KAAK;AAAA,EACb;AAAA,EAGA,IAAW,SAAkB;AAC5B,WAAO,CAAC,CAAC,KAAK,MAAM;AAAA,EACrB;AAAA,EAEA,IAAW,OAA0B;AACpC,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAsBQ,OAAa;AACpB,SAAK,SAAS,QAAQ,WAAW;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIO,QAAc;AACpB,SAAK,SAAS,QAAQ,YAAY;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,UAAU,QAAsB;AACtC,SAAK,SAAS,QAAQ,aAAa,EAAE,OAAO,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,WAAuB;AAC1C,SAAK,SAAS,QAAQ,gBAAgB,SAAS;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAA4B;AAClC,QAAI,KAAK,MAAM;AACd,aAAO,KAAK;AAAA,IACb;AACA,SAAK,SAAS,KAAK,OAAO;AAC1B,SAAK,WAAW,IAAI,SAAS,KAAK,QAAQ,KAAK,MAAM;AACrD,SAAK,gBAAgB;AAErB,UAAM,UAAW,KAAK,OAAO,iBAAkB,OAAS;AAExD,WAAO,KAAK,OAAO,QAAQ,IAAI;AAAA,MAC9B,KAAK,gBAAgB;AAAA,MACrB,KAAK,SAAS,WAAW,QAAQ,SAAS,OAAO;AAAA,IAClD,CAAC,EACC,KAAK,CAAC,CAAC,KAAK,MAAM;AAClB,UAAI,CAAC,OAAO;AACX;AAAA,MACD;AACA,WAAK,OAAO,IAAI,8BAA8B;AAC9C,WAAK,SAAS,QAAQ,iBAAiB,EAAE,MAAM,CAAC;AAChD,WAAK,SAAS,WAAW,eAAe,SAAS,OAAO;AAAA,IACzD,CAAC,EACA,MAAM,SAAO;AACb,WAAK;AACL,WAAK,OAAO,MAAM,gCAAgC,GAAG;AACrD,WAAK,SAAS,aAAa,sBAAsB;AACjD,WAAK,SAAS,eAAe,+BAA+B,GAAG;AAC/D,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA,EAEU,kBAAgC;AACzC,QAAI,CAAC,KAAK,OAAO,OAAO;AACvB,aAAO,QAAQ,QAAQ;AAAA,IACxB;AAEA,YAAQ,KAAK,OAAO,MAAM,MAAM;AAAA,MAC/B;AACC,eAAO,wBAAwB,KAAK,MAAM;AAAA,MAC3C;AACC,eAAO,gBAAgB,KAAK,MAAM;AAAA,MACnC;AACC,eAAO,QAAQ,OAAO,wBAAwB;AAAA,IAChD;AAAA,EACD;AAAA,EACU,kBAAwB;AACjC,SAAK,SAAS,GAAG,eAAe,CAAC,MAAW;AAC3C,WAAK,QAAQ;AACb,WAAK;AAAA,IACN,CAAC;AAED,SAAK,SAAS,GAAG,iBAAiB,CAAC,EAAC,QAAQ,GAAG,KAAI,MAAW;AAC7D,WAAK,QAAQ;AAAA,IACd,CAAC;AAED,SAAK,SAAS,GAAG,uBAAuB,OAAK,KAAK,gBAAgB,EAAE,MAAM;AAC1E,SAAK,SAAS,GAAG,oBAAoB,eAAa;AACjD,WAAK,oBAAoB;AAAA,IAC1B,CAAC;AAED,SAAK,SAAS,GAAG,iBAAiB,OAAK,KAAK,UAAU,CAAC;AAGvD,QAAI,KAAK,OAAO,iBAAiB,UAAa,SAAS,KAAK,OAAO,aAAa,GAAG;AAClF,YAAM,iBAAmD,CAAC,QAAQ;AACjE,YAAI,IAAI,oCAAiC;AACxC;AAAA,QACD;AACA,aAAK,SAAS,IAAI,uBAAuB,cAAc;AACvD,aAAK,UAAU,KAAK,OAAO,aAAa;AAAA,MACzC;AACA,WAAK,SAAS,GAAG,uBAAuB,cAAc;AAAA,IACvD;AAAA,EACD;AAAA,EAGO,GAA2B,OAAU,UAA8B;AAEzE,SAAK,SAAS,GAAQ,OAAO,CAAC,MAAW,WAAW,MAAM,SAAS,CAAC,CAAC,CAAC;AAAA,EACvE;AAAA,EAEO,IAA4B,OAAU,UAA8B;AAC1E,SAAK,SAAS,IAAI,OAAO,QAAQ;AAAA,EAClC;AAAA,EAEQ,SAA4B;AACnC,UAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,WAAO,aAAa,eAAe,GAAG;AACtC,WAAO,aAAa,mBAAmB,EAAE;AACzC,WAAO,QAAQ,WAAW,KAAK,OAAO,uBAAuB,KAAK,wBAAwB;AAC1F,WAAO,QAAQ,KAAK,OAAO,SAAS;AACpC,WAAO,SAAS,KAAK,OAAO,UAAU;AACtC,WAAO,MAAM,KAAK;AAElB,QAAI,KAAK,OAAO,WAAW;AAC1B,aAAO,YAAY,KAAK,OAAO;AAAA,IAChC;AAEA,SAAK,UAAU,YAAY,MAAM;AAEjC,WAAO;AAAA,EACR;AAAA,EAEO,UAAgB;AACtB,SAAK,OAAO,OAAO;AACnB,SAAK,SAAS,QAAQ;AACtB,SAAK,OAAO;AACZ,SAAK,cAAc,QAAQ,QAAM,GAAG,CAAC;AAAA,EACtC;AAAA,EAEA,MAAa,YAAY,UAAyC;AACjE,SAAK,OAAO,QAAQ;AACpB,QAAI;AACH,YAAM,QAAQ,MAAM,KAAK,gBAAgB;AACzC,WAAK,SAAS,QAAQ,eAAe,EAAE,MAAM,CAAC;AAC9C,YAAM,KAAK,SAAS,WAAW,eAAe,OAAO;AAAA,IACtD,SAAS,OAAO;AACf,WAAK,OAAO,MAAM,0BAA0B,KAAK;AACjD,YAAM;AAAA,IACP;AAAA,EACD;AACD;AAMQ,SAAS,cAAc,QAAkF;AAChH,SAAO;AAAA,IACN,IAAI,CAAC,CAAC,OAAO;AAAA,IACb,WAAY,OAAO,aAAa,UAE5B,CAAC,CAAC,OAAO,WAAW,SAAS,IAC9B;AAAA,IACH,QAAQ,OAAO,eAAe,OAAO;AAAA,IACrC,UAAU,OAAO;AAAA,IACjB,cAAc,OAAO;AAAA,IACrB,gBAAgB,OAAO;AAAA,IACvB,YAAY,OAAO;AAAA,IACnB,wBAAwB,OAAO;AAAA,IAC/B,qBAAqB,OAAO,kBAAkB,OAAO;AAAA,IACrD,WAAW,OAAO,cAAc,OAAO;AAAA,IACvC,MAAM,OAAO,iBAAiB,OAAO;AAAA,IACrC,iBAAiB,OAAO,uBAAuB,OAAO;AAAA,IACtD,YAAY,OAAO,gBAAgB,OAAO;AAAA,IAC1C,cAAc,OAAO,kBAAkB,OAAO;AAAA,IAC9C,WAAW,OAAO,oBAAoB,OAAO;AAAA,IAC7C,YAAY,OAAO,gBAAgB,OAAO;AAAA,IAC1C,eAAe,OAAO,yBAAyB,OAAO;AAAA,IACtD,kBAAkB,OAAO,qBAAqB,OAAO;AAAA,IACrD,eAAe,OAAO,mBAAmB,OAAO;AAAA,IAChD,oBAAoB,OAAO;AAAA,IAC3B,SAAS,OAAO;AAAA;AAAA,IAEhB,GAAG,OAAO,kBAAkB;AAAA,MAC3B,UAAU,OAAO,6BAA2C,MAAM,SAAS,OAAO,aAAa;AAAA,MAC/F,cAAc,OAAO,qCAA+C,MAAM,SAAS,OAAO,iBAAiB;AAAA,MAC3G,WAAW,OAAO,+BAA4C,MAAM,SAAS,OAAO,cAAc;AAAA,MAClG,YAAY,OAAO,iCAA6C,MAAM,SAAS,OAAO,eAAe;AAAA,MACrG,cAAc,OAAO,qCAA+C,MAAM,SAAS,OAAO,iBAAiB;AAAA,MAC3G,cAAc,OAAO,qCAA+C,MAAM,SAAS,OAAO,iBAAiB;AAAA,MAC3G,eAAe,OAAO,mCAA8C,MAAM,SAAS,OAAO,kBAAkB;AAAA,IAC7G;AAAA,EACD;AACD;;;AC3PO,IAAM,mBAAN,cAA+B,YAAqD;AAAA,EAiC1F,YACC,IACA,QACA,WACC;AACD,UAAM,IAAI,QAAQ,SAAS;AAf5B,SAAQ,iBAAyB;AAAA,EAgBjC;AAAA;AAAA;AAAA;AAAA,EAlCA,IAAW,cAAsB;AAChC,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,WAA+B;AACzC,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,gBAAwB;AAClC,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAW,YAAoC;AAC9C,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAcO,iBAAiB,OAAqB;AAC5C,QAAI,KAAK,QAAQ;AAChB,WAAK,OAAO,IAAI,iCAAiC;AACjD;AAAA,IACD;AACA,SAAK,SAAS,QAAQ,oBAAoB,EAAE,MAAM,CAAC;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,KAAK,aAAqB;AAChC,QAAI,KAAK,QAAQ;AAChB,WAAK,OAAO,IAAI,kBAAkB;AAClC;AAAA,IACD;AACA,SAAK,SAAS,QAAQ,QAAQ,EAAE,YAAY,CAAC;AAAA,EAC9C;AAAA,EAEU,kBAAwB;AACjC,UAAM,gBAAgB;AACtB,SAAK,SAAS,GAAG,eAAe,OAAK;AACpC,WAAK,eAAe,EAAE;AAAA,IAEvB,CAAC;AACD,SAAK,SAAS,GAAG,wBAAwB,OAAK;AAC7C,WAAK,iBAAiB;AAAA,IACvB,CAAC;AAAA,EACF;AAAA,EACU,YAAY,IAAY,QAAmC;AACpE,WAAO,YAAY,OAAO,SAAS,UAAU;AAAA,MAC5C;AAAA,MACA,GAAG,cAAc,MAAM;AAAA,IACxB,CAAC;AAAA,EACF;AACD;;;AClFA,SAAS,qBAAqB,QAAkC;AAC/D,SAAO,OAAO,mBAAmB,OAAO;AACzC;AAEO,IAAM,qBAAN,cAAiC,YAAyD;AAAA,EAOhG,YACkB,WACjB,QACA,WACC;AACD,UAAM,WAAW,QAAQ,SAAS;AAJjB;AAHlB,SAAQ;AAAA,EAQR;AAAA,EAXA,IAAW,gBAAgB;AAC1B,WAAO,KAAK;AAAA,EACb;AAAA,EAWU,kBAA2C;AACpD,UAAM,EAAC,MAAM,OAAM,IAAI,KAAK,OAAO,SAAS,CAAC;AAE7C,QAAI,yDAA0C,4BAA0B,WAAW,cAAe;AACjG,aAAO,uBAAuB,KAAK,WAAW,KAAK,MAAM;AAAA,IAC1D;AAEA,WAAO,MAAM,gBAAgB;AAAA,EAC9B;AAAA,EAEA,MAAgB,kBAAiC;AAChD,UAAM,gBAAgB;AAEtB,IAAQ,CAAC,kBAAkB,oBAAoB,oBAAoB,cAAc,EAAG,QAAQ,WAAS;AACpG,WAAK,SAAS,GAAG,OAAO,UAAQ,KAAK,iBAAiB,KAAK,MAAM;AAAA,IAClE,CAAC;AAED,SAAK,SAAS,GAAG,iBAAiB,OAAK;AACtC,WAAK,iBAAiB,EAAE;AAExB,UAAI,qBAAqB,KAAK,MAAM,GAAG;AACtC,aAAK,aAAa,EAAE,OAAO,MAAM,cAAc,MAAM,CAAC;AAAA,MACvD;AAAA,IACD,CAAC;AAED,SAAK,SAAS,GAAG,eAAe,MAAM;AACrC,WAAK;AAAA,IACN,CAAC;AAAA,EACF;AAAA,EAEO,aAAa,QAAwB;AAC3C,SAAK,SAAS,QAAQ,gBAAgB,MAAM;AAAA,EAC7C;AAAA,EACU,YAAY,IAAY,QAAmC;AACpE,WAAO,YAAY,OAAO,SAAS,kBAAkB,EAAE,IAAI;AAAA,MAC1D,eAAe,qBAAqB,MAAM;AAAA,MAC1C,GAAG,cAAc,MAAM;AAAA,IACxB,CAAC;AAAA,EACF;AACD;;;AC5DO,IAAM,sBAAN,cAAkC,iBAAiD;AAAA,EAWtF,YACI,IACA,QACA,WACF;AACE,UAAM,IAAI,QAAQ,SAAS;AAP/B,SAAQ,SAAiB;AAAA,EAQzB;AAAA,EAhBA,IAAW,WAA0B;AACjC,WAAO,KAAK;AAAA,EAChB;AAAA,EAGA,IAAW,eAAuB;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EAWU,kBAAwB;AAC9B,UAAM,gBAAgB;AACtB,SAAK,SAAS,GAAG,kBAAkB,cAAY;AAC3C,WAAK,YAAY;AACjB,UAAI,KAAK,MAAM,SAAS;AACpB,aAAK,SAAS,iBAAiB,KAAK,UAAU,KAAK,MAAM,OAAO,KAAK;AAAA,MACzE;AAAA,IACJ,CAAC;AACD,SAAK,SAAS,GAAG,eAAe,WAAS;AAErC,UAAI,CAAC,KAAK,UAAU,QAAQ;AAAE;AAAA,MAAQ;AACtC,WAAK,SAAS,iBAAiB,KAAK,UAAU,MAAM,OAAO,KAAK;AAChE,WAAK,SAAS,eAAe,gBAAgB;AAAA,QACzC,OAAO,KAAK;AAAA,QACZ,SAAS,KAAK,SAAS,OAAO,KAAK,MAAM,EAAE;AAAA,MAC/C,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEO,WAAW;AACd,UAAM,MAAM,OAAO,KAAK,SAAS,QAAQ,KAAK,SAAS,CAAC;AACxD,SAAK,YAAY,IAAI,IAAI,IAAI;AAAA,EACjC;AAAA,EAEO,OAAO;AACV,UAAM,MAAM,OAAO,KAAK,SAAS,QAAQ,KAAK,SAAS,CAAC;AACxD,SAAK,YAAY,IAAI,IAAI,IAAI;AAAA,EACjC;AAAA,EAEA,YAAY,SAAkB,UAAsC;AAChE,SAAK,SAAS,QAAQ,eAAe,EAAE,SAAS,SAAS,CAAC;AAAA,EAC9D;AAAA,EAEU,YAAY,IAAY,QAA2C;AACzE,WAAO,YAAY,OAAO,SAAS,UAAU;AAAA,MACzC,UAAU;AAAA,MACV,QAAQ,OAAO;AAAA,MACf,WAAW,OAAO;AAAA,MAClB,QAAQ,OAAO;AAAA,MACf,WAAW,OAAO;AAAA,MAClB,GAAG,cAAc,MAAM;AAAA,IAC3B,CAAC;AAAA,EACL;AACJ;AAQA,SAAS,iBAAiB,UAAyB,SAAqC;AACpF,QAAM,MAAM,SAAS,OAAO,UAAU,CAAC,EAAE,GAAG,MAAM,OAAO,OAAO;AAChE,SAAO,OAAO,IAAI,MAAM;AAC5B;AAQA,SAAS,OAAU,KAAU,GAAc;AACvC,QAAM,IAAI,IAAI;AACjB,SAAO,KAAM,IAAI,IAAK,KAAK,CAAC;AAC7B;;;ACxFO,SAAS,cAA+C,eAAiC;AAC/F,QAAM,MAAM;AAAA,IACX,GAAG;AAAA,EACJ;AACA,iBAAe,GAAG;AAClB,SAAO;AACR;AAEA,SAAS,eAAe,KAA4B;AACnD,MAAG,CAAC,IAAI,SAAS,MAAM,cAAc,GAAG;AACvC,UAAM,IAAI,MAAM,gCAAgC;AAAA,EACjD;AACA,MAAI,UAAU,IAAI,IAAI,IAAI,OAAO,EAAE;AACpC;;;ACMO,SAAS,WACf,SACA,SACA,QACoB;AACpB,QAAM,KAAK,cAAc,OAAO;AAChC,QAAM,MAAM,cAAc,MAAM;AAEhC,QAAM,QAAQ,IAAI,iBAAiB,SAAS,KAAK,EAAE;AACnD,QAAM,WAAW,EAAE,MAAM,MAAM;AAAA,EAAC,CAAC;AACjC,SAAO;AACR;AA0BO,SAAS,aACf,SACA,WACA,QACsB;AAEtB,QAAM,KAAK,cAAc,OAAO;AAChC,QAAM,MAAM,cAAc,MAAM;AAEhC,QAAM,UAAU,IAAI,mBAAmB,WAAW,KAAK,EAAE;AACzD,UAAQ,WAAW,EAAE,MAAM,MAAM;AAAA,EAAC,CAAC;AACnC,SAAO;AACR;AAyBO,SAAS,cACf,SACA,YACA,QACuB;AAEvB,QAAM,KAAK,cAAc,OAAO;AAChC,QAAM,MAAM,cAAc,MAAM;AAEhC,QAAM,SAAS,IAAI,oBAAoB,YAAY,KAAK,EAAE;AAC1D,SAAO,WAAW,EAAE,MAAM,MAAM;AAAA,EAAC,CAAC;AAClC,SAAO;AACR;;;ACxFA,IAAM,SAAS;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEA,IAAO,cAAQ;","names":["WebcastStatus","PlayerStatus","PlaylistLayout","VideoPlaybackSidebarButton","TokenType"]}